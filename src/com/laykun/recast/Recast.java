/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.laykun.recast;

public class Recast {
  public static SWIGTYPE_p_float new_float_array(int nelements) {
    long cPtr = RecastJNI.new_float_array(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public static void delete_float_array(SWIGTYPE_p_float ary) {
    RecastJNI.delete_float_array(SWIGTYPE_p_float.getCPtr(ary));
  }

  public static float float_array_getitem(SWIGTYPE_p_float ary, int index) {
    return RecastJNI.float_array_getitem(SWIGTYPE_p_float.getCPtr(ary), index);
  }

  public static void float_array_setitem(SWIGTYPE_p_float ary, int index, float value) {
    RecastJNI.float_array_setitem(SWIGTYPE_p_float.getCPtr(ary), index, value);
  }

  public static SWIGTYPE_p_double new_double_array(int nelements) {
    long cPtr = RecastJNI.new_double_array(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static void delete_double_array(SWIGTYPE_p_double ary) {
    RecastJNI.delete_double_array(SWIGTYPE_p_double.getCPtr(ary));
  }

  public static double double_array_getitem(SWIGTYPE_p_double ary, int index) {
    return RecastJNI.double_array_getitem(SWIGTYPE_p_double.getCPtr(ary), index);
  }

  public static void double_array_setitem(SWIGTYPE_p_double ary, int index, double value) {
    RecastJNI.double_array_setitem(SWIGTYPE_p_double.getCPtr(ary), index, value);
  }

  public static SWIGTYPE_p_int new_int_array(int nelements) {
    long cPtr = RecastJNI.new_int_array(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static void delete_int_array(SWIGTYPE_p_int ary) {
    RecastJNI.delete_int_array(SWIGTYPE_p_int.getCPtr(ary));
  }

  public static int int_array_getitem(SWIGTYPE_p_int ary, int index) {
    return RecastJNI.int_array_getitem(SWIGTYPE_p_int.getCPtr(ary), index);
  }

  public static void int_array_setitem(SWIGTYPE_p_int ary, int index, int value) {
    RecastJNI.int_array_setitem(SWIGTYPE_p_int.getCPtr(ary), index, value);
  }

  public static String new_char_array(int nelements) {
    return RecastJNI.new_char_array(nelements);
  }

  public static void delete_char_array(String ary) {
    RecastJNI.delete_char_array(ary);
  }

  public static char char_array_getitem(String ary, int index) {
    return RecastJNI.char_array_getitem(ary, index);
  }

  public static void char_array_setitem(String ary, int index, char value) {
    RecastJNI.char_array_setitem(ary, index, value);
  }

  public static SWIGTYPE_p_unsigned_char new_unsigned_char_array(int nelements) {
    long cPtr = RecastJNI.new_unsigned_char_array(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static void delete_unsigned_char_array(SWIGTYPE_p_unsigned_char ary) {
    RecastJNI.delete_unsigned_char_array(SWIGTYPE_p_unsigned_char.getCPtr(ary));
  }

  public static short unsigned_char_array_getitem(SWIGTYPE_p_unsigned_char ary, int index) {
    return RecastJNI.unsigned_char_array_getitem(SWIGTYPE_p_unsigned_char.getCPtr(ary), index);
  }

  public static void unsigned_char_array_setitem(SWIGTYPE_p_unsigned_char ary, int index, short value) {
    RecastJNI.unsigned_char_array_setitem(SWIGTYPE_p_unsigned_char.getCPtr(ary), index, value);
  }

  public static SWIGTYPE_p_p_unsigned_char new_unsigned_char_array_array(int nelements) {
    long cPtr = RecastJNI.new_unsigned_char_array_array(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_unsigned_char(cPtr, false);
  }

  public static void delete_unsigned_char_array_array(SWIGTYPE_p_p_unsigned_char ary) {
    RecastJNI.delete_unsigned_char_array_array(SWIGTYPE_p_p_unsigned_char.getCPtr(ary));
  }

  public static SWIGTYPE_p_unsigned_char unsigned_char_array_array_getitem(SWIGTYPE_p_p_unsigned_char ary, int index) {
    long cPtr = RecastJNI.unsigned_char_array_array_getitem(SWIGTYPE_p_p_unsigned_char.getCPtr(ary), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static void unsigned_char_array_array_setitem(SWIGTYPE_p_p_unsigned_char ary, int index, SWIGTYPE_p_unsigned_char value) {
    RecastJNI.unsigned_char_array_array_setitem(SWIGTYPE_p_p_unsigned_char.getCPtr(ary), index, SWIGTYPE_p_unsigned_char.getCPtr(value));
  }

  public static SWIGTYPE_p_unsigned_int new_unsigned_int_array(int nelements) {
    long cPtr = RecastJNI.new_unsigned_int_array(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
  }

  public static void delete_unsigned_int_array(SWIGTYPE_p_unsigned_int ary) {
    RecastJNI.delete_unsigned_int_array(SWIGTYPE_p_unsigned_int.getCPtr(ary));
  }

  public static long unsigned_int_array_getitem(SWIGTYPE_p_unsigned_int ary, int index) {
    return RecastJNI.unsigned_int_array_getitem(SWIGTYPE_p_unsigned_int.getCPtr(ary), index);
  }

  public static void unsigned_int_array_setitem(SWIGTYPE_p_unsigned_int ary, int index, long value) {
    RecastJNI.unsigned_int_array_setitem(SWIGTYPE_p_unsigned_int.getCPtr(ary), index, value);
  }

  public static int getRC_CONTOUR_REG_MASK() {
    return RecastJNI.RC_CONTOUR_REG_MASK_get();
  }

  public static int getRC_MESH_NULL_IDX() {
    return RecastJNI.RC_MESH_NULL_IDX_get();
  }

  public static short getRC_NULL_AREA() {
    return RecastJNI.RC_NULL_AREA_get();
  }

  public static short getRC_WALKABLE_AREA() {
    return RecastJNI.RC_WALKABLE_AREA_get();
  }

  public static int getRC_NOT_CONNECTED() {
    return RecastJNI.RC_NOT_CONNECTED_get();
  }

  public static boolean rcBuildHeightfieldLayers(rcContext ctx, rcCompactHeightfield chf, int borderSize, int walkableHeight, rcHeightfieldLayerSet lset) {
    return RecastJNI.rcBuildHeightfieldLayers(rcContext.getCPtr(ctx), ctx, rcCompactHeightfield.getCPtr(chf), chf, borderSize, walkableHeight, rcHeightfieldLayerSet.getCPtr(lset), lset);
  }

  public static boolean rcBuildContours(rcContext ctx, rcCompactHeightfield chf, float maxError, int maxEdgeLen, rcContourSet cset, int flags) {
    return RecastJNI.rcBuildContours__SWIG_0(rcContext.getCPtr(ctx), ctx, rcCompactHeightfield.getCPtr(chf), chf, maxError, maxEdgeLen, rcContourSet.getCPtr(cset), cset, flags);
  }

  public static boolean rcBuildContours(rcContext ctx, rcCompactHeightfield chf, float maxError, int maxEdgeLen, rcContourSet cset) {
    return RecastJNI.rcBuildContours__SWIG_1(rcContext.getCPtr(ctx), ctx, rcCompactHeightfield.getCPtr(chf), chf, maxError, maxEdgeLen, rcContourSet.getCPtr(cset), cset);
  }

  public static boolean rcBuildPolyMesh(rcContext ctx, rcContourSet cset, int nvp, rcPolyMesh mesh) {
    return RecastJNI.rcBuildPolyMesh(rcContext.getCPtr(ctx), ctx, rcContourSet.getCPtr(cset), cset, nvp, rcPolyMesh.getCPtr(mesh), mesh);
  }

  public static boolean rcMergePolyMeshes(rcContext ctx, SWIGTYPE_p_p_rcPolyMesh meshes, int nmeshes, rcPolyMesh mesh) {
    return RecastJNI.rcMergePolyMeshes(rcContext.getCPtr(ctx), ctx, SWIGTYPE_p_p_rcPolyMesh.getCPtr(meshes), nmeshes, rcPolyMesh.getCPtr(mesh), mesh);
  }

  public static boolean rcBuildPolyMeshDetail(rcContext ctx, rcPolyMesh mesh, rcCompactHeightfield chf, float sampleDist, float sampleMaxError, rcPolyMeshDetail dmesh) {
    return RecastJNI.rcBuildPolyMeshDetail(rcContext.getCPtr(ctx), ctx, rcPolyMesh.getCPtr(mesh), mesh, rcCompactHeightfield.getCPtr(chf), chf, sampleDist, sampleMaxError, rcPolyMeshDetail.getCPtr(dmesh), dmesh);
  }

  public static boolean rcCopyPolyMesh(rcContext ctx, rcPolyMesh src, rcPolyMesh dst) {
    return RecastJNI.rcCopyPolyMesh(rcContext.getCPtr(ctx), ctx, rcPolyMesh.getCPtr(src), src, rcPolyMesh.getCPtr(dst), dst);
  }

  public static boolean rcMergePolyMeshDetails(rcContext ctx, SWIGTYPE_p_p_rcPolyMeshDetail meshes, int nmeshes, rcPolyMeshDetail mesh) {
    return RecastJNI.rcMergePolyMeshDetails(rcContext.getCPtr(ctx), ctx, SWIGTYPE_p_p_rcPolyMeshDetail.getCPtr(meshes), nmeshes, rcPolyMeshDetail.getCPtr(mesh), mesh);
  }

  public static void rcCalcBounds(SWIGTYPE_p_float verts, int nv, SWIGTYPE_p_float bmin, SWIGTYPE_p_float bmax) {
    RecastJNI.rcCalcBounds(SWIGTYPE_p_float.getCPtr(verts), nv, SWIGTYPE_p_float.getCPtr(bmin), SWIGTYPE_p_float.getCPtr(bmax));
  }

  public static void rcCalcGridSize(SWIGTYPE_p_float bmin, SWIGTYPE_p_float bmax, float cs, SWIGTYPE_p_int w, SWIGTYPE_p_int h) {
    RecastJNI.rcCalcGridSize(SWIGTYPE_p_float.getCPtr(bmin), SWIGTYPE_p_float.getCPtr(bmax), cs, SWIGTYPE_p_int.getCPtr(w), SWIGTYPE_p_int.getCPtr(h));
  }

  public static boolean rcCreateHeightfield(rcContext ctx, rcHeightfield hf, int width, int height, SWIGTYPE_p_float bmin, SWIGTYPE_p_float bmax, float cs, float ch) {
    return RecastJNI.rcCreateHeightfield(rcContext.getCPtr(ctx), ctx, rcHeightfield.getCPtr(hf), hf, width, height, SWIGTYPE_p_float.getCPtr(bmin), SWIGTYPE_p_float.getCPtr(bmax), cs, ch);
  }

  public static void rcMarkWalkableTriangles(rcContext ctx, float walkableSlopeAngle, SWIGTYPE_p_float verts, int nv, SWIGTYPE_p_int tris, int nt, SWIGTYPE_p_unsigned_char areas) {
    RecastJNI.rcMarkWalkableTriangles(rcContext.getCPtr(ctx), ctx, walkableSlopeAngle, SWIGTYPE_p_float.getCPtr(verts), nv, SWIGTYPE_p_int.getCPtr(tris), nt, SWIGTYPE_p_unsigned_char.getCPtr(areas));
  }

  public static void rcClearUnwalkableTriangles(rcContext ctx, float walkableSlopeAngle, SWIGTYPE_p_float verts, int nv, SWIGTYPE_p_int tris, int nt, SWIGTYPE_p_unsigned_char areas) {
    RecastJNI.rcClearUnwalkableTriangles(rcContext.getCPtr(ctx), ctx, walkableSlopeAngle, SWIGTYPE_p_float.getCPtr(verts), nv, SWIGTYPE_p_int.getCPtr(tris), nt, SWIGTYPE_p_unsigned_char.getCPtr(areas));
  }

  public static void rcAddSpan(rcContext ctx, rcHeightfield hf, int x, int y, int smin, int smax, short area, int flagMergeThr) {
    RecastJNI.rcAddSpan(rcContext.getCPtr(ctx), ctx, rcHeightfield.getCPtr(hf), hf, x, y, smin, smax, area, flagMergeThr);
  }

  public static void rcRasterizeTriangle(rcContext ctx, SWIGTYPE_p_float v0, SWIGTYPE_p_float v1, SWIGTYPE_p_float v2, short area, rcHeightfield solid, int flagMergeThr) {
    RecastJNI.rcRasterizeTriangle__SWIG_0(rcContext.getCPtr(ctx), ctx, SWIGTYPE_p_float.getCPtr(v0), SWIGTYPE_p_float.getCPtr(v1), SWIGTYPE_p_float.getCPtr(v2), area, rcHeightfield.getCPtr(solid), solid, flagMergeThr);
  }

  public static void rcRasterizeTriangle(rcContext ctx, SWIGTYPE_p_float v0, SWIGTYPE_p_float v1, SWIGTYPE_p_float v2, short area, rcHeightfield solid) {
    RecastJNI.rcRasterizeTriangle__SWIG_1(rcContext.getCPtr(ctx), ctx, SWIGTYPE_p_float.getCPtr(v0), SWIGTYPE_p_float.getCPtr(v1), SWIGTYPE_p_float.getCPtr(v2), area, rcHeightfield.getCPtr(solid), solid);
  }

  public static void rcRasterizeTriangles(rcContext ctx, SWIGTYPE_p_float verts, int nv, SWIGTYPE_p_int tris, SWIGTYPE_p_unsigned_char areas, int nt, rcHeightfield solid, int flagMergeThr) {
    RecastJNI.rcRasterizeTriangles__SWIG_0(rcContext.getCPtr(ctx), ctx, SWIGTYPE_p_float.getCPtr(verts), nv, SWIGTYPE_p_int.getCPtr(tris), SWIGTYPE_p_unsigned_char.getCPtr(areas), nt, rcHeightfield.getCPtr(solid), solid, flagMergeThr);
  }

  public static void rcRasterizeTriangles(rcContext ctx, SWIGTYPE_p_float verts, int nv, SWIGTYPE_p_int tris, SWIGTYPE_p_unsigned_char areas, int nt, rcHeightfield solid) {
    RecastJNI.rcRasterizeTriangles__SWIG_1(rcContext.getCPtr(ctx), ctx, SWIGTYPE_p_float.getCPtr(verts), nv, SWIGTYPE_p_int.getCPtr(tris), SWIGTYPE_p_unsigned_char.getCPtr(areas), nt, rcHeightfield.getCPtr(solid), solid);
  }

  public static void rcRasterizeTriangles(rcContext ctx, SWIGTYPE_p_float verts, int nv, SWIGTYPE_p_unsigned_short tris, SWIGTYPE_p_unsigned_char areas, int nt, rcHeightfield solid, int flagMergeThr) {
    RecastJNI.rcRasterizeTriangles__SWIG_2(rcContext.getCPtr(ctx), ctx, SWIGTYPE_p_float.getCPtr(verts), nv, SWIGTYPE_p_unsigned_short.getCPtr(tris), SWIGTYPE_p_unsigned_char.getCPtr(areas), nt, rcHeightfield.getCPtr(solid), solid, flagMergeThr);
  }

  public static void rcRasterizeTriangles(rcContext ctx, SWIGTYPE_p_float verts, int nv, SWIGTYPE_p_unsigned_short tris, SWIGTYPE_p_unsigned_char areas, int nt, rcHeightfield solid) {
    RecastJNI.rcRasterizeTriangles__SWIG_3(rcContext.getCPtr(ctx), ctx, SWIGTYPE_p_float.getCPtr(verts), nv, SWIGTYPE_p_unsigned_short.getCPtr(tris), SWIGTYPE_p_unsigned_char.getCPtr(areas), nt, rcHeightfield.getCPtr(solid), solid);
  }

  public static void rcRasterizeTriangles(rcContext ctx, SWIGTYPE_p_float verts, SWIGTYPE_p_unsigned_char areas, int nt, rcHeightfield solid, int flagMergeThr) {
    RecastJNI.rcRasterizeTriangles__SWIG_4(rcContext.getCPtr(ctx), ctx, SWIGTYPE_p_float.getCPtr(verts), SWIGTYPE_p_unsigned_char.getCPtr(areas), nt, rcHeightfield.getCPtr(solid), solid, flagMergeThr);
  }

  public static void rcRasterizeTriangles(rcContext ctx, SWIGTYPE_p_float verts, SWIGTYPE_p_unsigned_char areas, int nt, rcHeightfield solid) {
    RecastJNI.rcRasterizeTriangles__SWIG_5(rcContext.getCPtr(ctx), ctx, SWIGTYPE_p_float.getCPtr(verts), SWIGTYPE_p_unsigned_char.getCPtr(areas), nt, rcHeightfield.getCPtr(solid), solid);
  }

  public static void rcFilterLowHangingWalkableObstacles(rcContext ctx, int walkableClimb, rcHeightfield solid) {
    RecastJNI.rcFilterLowHangingWalkableObstacles(rcContext.getCPtr(ctx), ctx, walkableClimb, rcHeightfield.getCPtr(solid), solid);
  }

  public static void rcFilterLedgeSpans(rcContext ctx, int walkableHeight, int walkableClimb, rcHeightfield solid) {
    RecastJNI.rcFilterLedgeSpans(rcContext.getCPtr(ctx), ctx, walkableHeight, walkableClimb, rcHeightfield.getCPtr(solid), solid);
  }

  public static void rcFilterWalkableLowHeightSpans(rcContext ctx, int walkableHeight, rcHeightfield solid) {
    RecastJNI.rcFilterWalkableLowHeightSpans(rcContext.getCPtr(ctx), ctx, walkableHeight, rcHeightfield.getCPtr(solid), solid);
  }

  public static int rcGetHeightFieldSpanCount(rcContext ctx, rcHeightfield hf) {
    return RecastJNI.rcGetHeightFieldSpanCount(rcContext.getCPtr(ctx), ctx, rcHeightfield.getCPtr(hf), hf);
  }

  public static boolean rcBuildCompactHeightfield(rcContext ctx, int walkableHeight, int walkableClimb, rcHeightfield hf, rcCompactHeightfield chf) {
    return RecastJNI.rcBuildCompactHeightfield(rcContext.getCPtr(ctx), ctx, walkableHeight, walkableClimb, rcHeightfield.getCPtr(hf), hf, rcCompactHeightfield.getCPtr(chf), chf);
  }

  public static boolean rcErodeWalkableArea(rcContext ctx, int radius, rcCompactHeightfield chf) {
    return RecastJNI.rcErodeWalkableArea(rcContext.getCPtr(ctx), ctx, radius, rcCompactHeightfield.getCPtr(chf), chf);
  }

  public static boolean rcMedianFilterWalkableArea(rcContext ctx, rcCompactHeightfield chf) {
    return RecastJNI.rcMedianFilterWalkableArea(rcContext.getCPtr(ctx), ctx, rcCompactHeightfield.getCPtr(chf), chf);
  }

  public static void rcMarkBoxArea(rcContext ctx, SWIGTYPE_p_float bmin, SWIGTYPE_p_float bmax, short areaId, rcCompactHeightfield chf) {
    RecastJNI.rcMarkBoxArea(rcContext.getCPtr(ctx), ctx, SWIGTYPE_p_float.getCPtr(bmin), SWIGTYPE_p_float.getCPtr(bmax), areaId, rcCompactHeightfield.getCPtr(chf), chf);
  }

  public static void rcMarkConvexPolyArea(rcContext ctx, SWIGTYPE_p_float verts, int nverts, float hmin, float hmax, short areaId, rcCompactHeightfield chf) {
    RecastJNI.rcMarkConvexPolyArea(rcContext.getCPtr(ctx), ctx, SWIGTYPE_p_float.getCPtr(verts), nverts, hmin, hmax, areaId, rcCompactHeightfield.getCPtr(chf), chf);
  }

  public static int rcOffsetPoly(SWIGTYPE_p_float verts, int nverts, float offset, SWIGTYPE_p_float outVerts, int maxOutVerts) {
    return RecastJNI.rcOffsetPoly(SWIGTYPE_p_float.getCPtr(verts), nverts, offset, SWIGTYPE_p_float.getCPtr(outVerts), maxOutVerts);
  }

  public static void rcMarkCylinderArea(rcContext ctx, SWIGTYPE_p_float pos, float r, float h, short areaId, rcCompactHeightfield chf) {
    RecastJNI.rcMarkCylinderArea(rcContext.getCPtr(ctx), ctx, SWIGTYPE_p_float.getCPtr(pos), r, h, areaId, rcCompactHeightfield.getCPtr(chf), chf);
  }

  public static boolean rcBuildDistanceField(rcContext ctx, rcCompactHeightfield chf) {
    return RecastJNI.rcBuildDistanceField(rcContext.getCPtr(ctx), ctx, rcCompactHeightfield.getCPtr(chf), chf);
  }

  public static boolean rcBuildRegions(rcContext ctx, rcCompactHeightfield chf, int borderSize, int minRegionArea, int mergeRegionArea) {
    return RecastJNI.rcBuildRegions(rcContext.getCPtr(ctx), ctx, rcCompactHeightfield.getCPtr(chf), chf, borderSize, minRegionArea, mergeRegionArea);
  }

  public static boolean rcBuildLayerRegions(rcContext ctx, rcCompactHeightfield chf, int borderSize, int minRegionArea) {
    return RecastJNI.rcBuildLayerRegions(rcContext.getCPtr(ctx), ctx, rcCompactHeightfield.getCPtr(chf), chf, borderSize, minRegionArea);
  }

  public static boolean rcBuildRegionsMonotone(rcContext ctx, rcCompactHeightfield chf, int borderSize, int minRegionArea, int mergeRegionArea) {
    return RecastJNI.rcBuildRegionsMonotone(rcContext.getCPtr(ctx), ctx, rcCompactHeightfield.getCPtr(chf), chf, borderSize, minRegionArea, mergeRegionArea);
  }

  public static rcHeightfield rcAllocHeightfield() {
    long cPtr = RecastJNI.rcAllocHeightfield();
    return (cPtr == 0) ? null : new rcHeightfield(cPtr, false);
  }

  public static void rcFreeHeightField(rcHeightfield hf) {
    RecastJNI.rcFreeHeightField(rcHeightfield.getCPtr(hf), hf);
  }

  public static rcCompactHeightfield rcAllocCompactHeightfield() {
    long cPtr = RecastJNI.rcAllocCompactHeightfield();
    return (cPtr == 0) ? null : new rcCompactHeightfield(cPtr, false);
  }

  public static void rcFreeCompactHeightfield(rcCompactHeightfield chf) {
    RecastJNI.rcFreeCompactHeightfield(rcCompactHeightfield.getCPtr(chf), chf);
  }

  public static rcHeightfieldLayerSet rcAllocHeightfieldLayerSet() {
    long cPtr = RecastJNI.rcAllocHeightfieldLayerSet();
    return (cPtr == 0) ? null : new rcHeightfieldLayerSet(cPtr, false);
  }

  public static void rcFreeHeightfieldLayerSet(rcHeightfieldLayerSet lset) {
    RecastJNI.rcFreeHeightfieldLayerSet(rcHeightfieldLayerSet.getCPtr(lset), lset);
  }

  public static rcContourSet rcAllocContourSet() {
    long cPtr = RecastJNI.rcAllocContourSet();
    return (cPtr == 0) ? null : new rcContourSet(cPtr, false);
  }

  public static void rcFreeContourSet(rcContourSet cset) {
    RecastJNI.rcFreeContourSet(rcContourSet.getCPtr(cset), cset);
  }

  public static rcPolyMesh rcAllocPolyMesh() {
    long cPtr = RecastJNI.rcAllocPolyMesh();
    return (cPtr == 0) ? null : new rcPolyMesh(cPtr, false);
  }

  public static void rcFreePolyMesh(rcPolyMesh pmesh) {
    RecastJNI.rcFreePolyMesh(rcPolyMesh.getCPtr(pmesh), pmesh);
  }

  public static rcPolyMeshDetail rcAllocPolyMeshDetail() {
    long cPtr = RecastJNI.rcAllocPolyMeshDetail();
    return (cPtr == 0) ? null : new rcPolyMeshDetail(cPtr, false);
  }

  public static void rcFreePolyMeshDetail(rcPolyMeshDetail dmesh) {
    RecastJNI.rcFreePolyMeshDetail(rcPolyMeshDetail.getCPtr(dmesh), dmesh);
  }

  public static int getDT_VERTS_PER_POLYGON() {
    return RecastJNI.DT_VERTS_PER_POLYGON_get();
  }

  public static int getDT_NAVMESH_MAGIC() {
    return RecastJNI.DT_NAVMESH_MAGIC_get();
  }

  public static int getDT_NAVMESH_VERSION() {
    return RecastJNI.DT_NAVMESH_VERSION_get();
  }

  public static int getDT_NAVMESH_STATE_MAGIC() {
    return RecastJNI.DT_NAVMESH_STATE_MAGIC_get();
  }

  public static int getDT_NAVMESH_STATE_VERSION() {
    return RecastJNI.DT_NAVMESH_STATE_VERSION_get();
  }

  public static int getDT_EXT_LINK() {
    return RecastJNI.DT_EXT_LINK_get();
  }

  public static long getDT_NULL_LINK() {
    return RecastJNI.DT_NULL_LINK_get();
  }

  public static long getDT_OFFMESH_CON_BIDIR() {
    return RecastJNI.DT_OFFMESH_CON_BIDIR_get();
  }

  public static int getDT_MAX_AREAS() {
    return RecastJNI.DT_MAX_AREAS_get();
  }

  public static float getDT_RAY_CAST_LIMIT_PROPORTIONS() {
    return RecastJNI.DT_RAY_CAST_LIMIT_PROPORTIONS_get();
  }

  public static dtNavMesh dtAllocNavMesh() {
    long cPtr = RecastJNI.dtAllocNavMesh();
    return (cPtr == 0) ? null : new dtNavMesh(cPtr, false);
  }

  public static void dtFreeNavMesh(dtNavMesh navmesh) {
    RecastJNI.dtFreeNavMesh(dtNavMesh.getCPtr(navmesh), navmesh);
  }

  public static boolean dtCreateNavMeshData(dtNavMeshCreateParams params, SWIGTYPE_p_p_unsigned_char outData, SWIGTYPE_p_int outDataSize) {
    return RecastJNI.dtCreateNavMeshData(dtNavMeshCreateParams.getCPtr(params), params, SWIGTYPE_p_p_unsigned_char.getCPtr(outData), SWIGTYPE_p_int.getCPtr(outDataSize));
  }

  public static boolean dtNavMeshHeaderSwapEndian(SWIGTYPE_p_unsigned_char data, int dataSize) {
    return RecastJNI.dtNavMeshHeaderSwapEndian(SWIGTYPE_p_unsigned_char.getCPtr(data), dataSize);
  }

  public static boolean dtNavMeshDataSwapEndian(SWIGTYPE_p_unsigned_char data, int dataSize) {
    return RecastJNI.dtNavMeshDataSwapEndian(SWIGTYPE_p_unsigned_char.getCPtr(data), dataSize);
  }

  public static dtNavMeshQuery dtAllocNavMeshQuery() {
    long cPtr = RecastJNI.dtAllocNavMeshQuery();
    return (cPtr == 0) ? null : new dtNavMeshQuery(cPtr, false);
  }

  public static void dtFreeNavMeshQuery(dtNavMeshQuery query) {
    RecastJNI.dtFreeNavMeshQuery(dtNavMeshQuery.getCPtr(query), query);
  }

  public static long getDT_FAILURE() {
    return RecastJNI.DT_FAILURE_get();
  }

  public static long getDT_SUCCESS() {
    return RecastJNI.DT_SUCCESS_get();
  }

  public static long getDT_IN_PROGRESS() {
    return RecastJNI.DT_IN_PROGRESS_get();
  }

  public static long getDT_STATUS_DETAIL_MASK() {
    return RecastJNI.DT_STATUS_DETAIL_MASK_get();
  }

  public static long getDT_WRONG_MAGIC() {
    return RecastJNI.DT_WRONG_MAGIC_get();
  }

  public static long getDT_WRONG_VERSION() {
    return RecastJNI.DT_WRONG_VERSION_get();
  }

  public static long getDT_OUT_OF_MEMORY() {
    return RecastJNI.DT_OUT_OF_MEMORY_get();
  }

  public static long getDT_INVALID_PARAM() {
    return RecastJNI.DT_INVALID_PARAM_get();
  }

  public static long getDT_BUFFER_TOO_SMALL() {
    return RecastJNI.DT_BUFFER_TOO_SMALL_get();
  }

  public static long getDT_OUT_OF_NODES() {
    return RecastJNI.DT_OUT_OF_NODES_get();
  }

  public static long getDT_PARTIAL_RESULT() {
    return RecastJNI.DT_PARTIAL_RESULT_get();
  }

  public static boolean dtStatusSucceed(long status) {
    return RecastJNI.dtStatusSucceed(status);
  }

  public static boolean dtStatusFailed(long status) {
    return RecastJNI.dtStatusFailed(status);
  }

  public static boolean dtStatusInProgress(long status) {
    return RecastJNI.dtStatusInProgress(status);
  }

  public static boolean dtStatusDetail(long status, long detail) {
    return RecastJNI.dtStatusDetail(status, detail);
  }

  public static int getDT_NULL_IDX() {
    return RecastJNI.DT_NULL_IDX_get();
  }

  public static int getDT_MAX_STATES_PER_NODE() {
    return RecastJNI.DT_MAX_STATES_PER_NODE_get();
  }

  public static void dtAllocSetCustom(SWIGTYPE_p_f_int_enum_dtAllocHint__p_void allocFunc, SWIGTYPE_p_f_p_void__void freeFunc) {
    RecastJNI.dtAllocSetCustom(SWIGTYPE_p_f_int_enum_dtAllocHint__p_void.getCPtr(allocFunc), SWIGTYPE_p_f_p_void__void.getCPtr(freeFunc));
  }

  public static SWIGTYPE_p_void dtAlloc(int size, dtAllocHint hint) {
    long cPtr = RecastJNI.dtAlloc(size, hint.swigValue());
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void dtFree(SWIGTYPE_p_void ptr) {
    RecastJNI.dtFree(SWIGTYPE_p_void.getCPtr(ptr));
  }

}
