/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "DetourNavMesh.h"
#include "DetourNavMeshBuilder.h"
#include "DetourNavMeshQuery.h"
#include "DetourAlloc.h"
#include "DetourAssert.h"
#include "DetourCommon.h"
#include "DetourMath.h"
#include "DetourNode.h"
#include "DetourStatus.h"


static float *new_float_array(int nelements) { 
  return new float[nelements]; 
}

static void delete_float_array(float *ary) { 
  delete [] ary; 
}

static float float_array_getitem(float *ary, int index) {
    return ary[index];
}
static void float_array_setitem(float *ary, int index, float value) {
    ary[index] = value;
}


static double *new_double_array(int nelements) { 
  return new double[nelements]; 
}

static void delete_double_array(double *ary) { 
  delete [] ary; 
}

static double double_array_getitem(double *ary, int index) {
    return ary[index];
}
static void double_array_setitem(double *ary, int index, double value) {
    ary[index] = value;
}


static int *new_int_array(int nelements) { 
  return new int[nelements]; 
}

static void delete_int_array(int *ary) { 
  delete [] ary; 
}

static int int_array_getitem(int *ary, int index) {
    return ary[index];
}
static void int_array_setitem(int *ary, int index, int value) {
    ary[index] = value;
}


static char *new_char_array(int nelements) { 
  return new char[nelements]; 
}

static void delete_char_array(char *ary) { 
  delete [] ary; 
}

static char char_array_getitem(char *ary, int index) {
    return ary[index];
}
static void char_array_setitem(char *ary, int index, char value) {
    ary[index] = value;
}


static unsigned char *new_unsigned_char_array(int nelements) { 
  return new unsigned char[nelements]; 
}

static void delete_unsigned_char_array(unsigned char *ary) { 
  delete [] ary; 
}

static unsigned char unsigned_char_array_getitem(unsigned char *ary, int index) {
    return ary[index];
}
static void unsigned_char_array_setitem(unsigned char *ary, int index, unsigned char value) {
    ary[index] = value;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1float_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (float *)new_float_array(arg1);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1float_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  float *arg1 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  delete_float_array(arg1);
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_float_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jfloat jresult = 0 ;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)float_array_getitem(arg1,arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_float_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3) {
  float *arg1 = (float *) 0 ;
  int arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  float_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1double_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (double *)new_double_array(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1double_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  double *arg1 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  delete_double_array(arg1);
}


SWIGEXPORT jdouble JNICALL Java_com_laykun_Detour_DetourJNI_double_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)double_array_getitem(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_double_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  double_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1int_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)new_int_array(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1int_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  delete_int_array(arg1);
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_int_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)int_array_getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_int_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  int_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jstring JNICALL Java_com_laykun_Detour_DetourJNI_new_1char_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (char *)new_char_array(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1char_1array(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  delete_char_array(arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jchar JNICALL Java_com_laykun_Detour_DetourJNI_char_1array_1getitem(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jchar jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (char)char_array_getitem(arg1,arg2);
  jresult = (jchar)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_char_1array_1setitem(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jchar jarg3) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (int)jarg2; 
  arg3 = (char)jarg3; 
  char_array_setitem(arg1,arg2,arg3);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1unsigned_1char_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (unsigned char *)new_unsigned_char_array(arg1);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1unsigned_1char_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  delete_unsigned_char_array(arg1);
}


SWIGEXPORT jshort JNICALL Java_com_laykun_Detour_DetourJNI_unsigned_1char_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jshort jresult = 0 ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)unsigned_char_array_getitem(arg1,arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_unsigned_1char_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jshort jarg3) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  unsigned_char_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1VERTS_1PER_1POLYGON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)DT_VERTS_PER_POLYGON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1NAVMESH_1MAGIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)DT_NAVMESH_MAGIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1NAVMESH_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)DT_NAVMESH_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1NAVMESH_1STATE_1MAGIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)DT_NAVMESH_STATE_MAGIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1NAVMESH_1STATE_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)DT_NAVMESH_STATE_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1EXT_1LINK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned short)(unsigned short)DT_EXT_LINK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_DT_1NULL_1LINK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)DT_NULL_LINK;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_DT_1OFFMESH_1CON_1BIDIR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)DT_OFFMESH_CON_BIDIR;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1MAX_1AREAS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)DT_MAX_AREAS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1TILE_1FREE_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtTileFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (dtTileFlags)DT_TILE_FREE_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1STRAIGHTPATH_1START_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtStraightPathFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (dtStraightPathFlags)DT_STRAIGHTPATH_START;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1STRAIGHTPATH_1END_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtStraightPathFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (dtStraightPathFlags)DT_STRAIGHTPATH_END;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1STRAIGHTPATH_1OFFMESH_1CONNECTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtStraightPathFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (dtStraightPathFlags)DT_STRAIGHTPATH_OFFMESH_CONNECTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1STRAIGHTPATH_1AREA_1CROSSINGS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtStraightPathOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (dtStraightPathOptions)DT_STRAIGHTPATH_AREA_CROSSINGS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1STRAIGHTPATH_1ALL_1CROSSINGS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtStraightPathOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (dtStraightPathOptions)DT_STRAIGHTPATH_ALL_CROSSINGS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1FINDPATH_1LOW_1QUALITY_1FAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtFindPathOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (dtFindPathOptions)DT_FINDPATH_LOW_QUALITY_FAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1FINDPATH_1ANY_1ANGLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtFindPathOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (dtFindPathOptions)DT_FINDPATH_ANY_ANGLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1RAYCAST_1USE_1COSTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtRaycastOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (dtRaycastOptions)DT_RAYCAST_USE_COSTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_DT_1RAY_1CAST_1LIMIT_1PROPORTIONS_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)DT_RAY_CAST_LIMIT_PROPORTIONS;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1POLYTYPE_1GROUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtPolyTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (dtPolyTypes)DT_POLYTYPE_GROUND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_DT_1POLYTYPE_1OFFMESH_1CONNECTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtPolyTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (dtPolyTypes)DT_POLYTYPE_OFFMESH_CONNECTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtPoly_1firstLink_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtPoly *arg1 = (dtPoly *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPoly **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->firstLink = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtPoly_1firstLink_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtPoly *arg1 = (dtPoly *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPoly **)&jarg1; 
  result = (unsigned int) ((arg1)->firstLink);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtPoly_1verts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtPoly *arg1 = (dtPoly *) 0 ;
  unsigned short *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPoly **)&jarg1; 
  arg2 = *(unsigned short **)&jarg2; 
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->verts;
    for (ii = 0; ii < (size_t)DT_VERTS_PER_POLYGON; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtPoly_1verts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtPoly *arg1 = (dtPoly *) 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPoly **)&jarg1; 
  result = (unsigned short *)(unsigned short *) ((arg1)->verts);
  *(unsigned short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtPoly_1neis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtPoly *arg1 = (dtPoly *) 0 ;
  unsigned short *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPoly **)&jarg1; 
  arg2 = *(unsigned short **)&jarg2; 
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->neis;
    for (ii = 0; ii < (size_t)DT_VERTS_PER_POLYGON; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtPoly_1neis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtPoly *arg1 = (dtPoly *) 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPoly **)&jarg1; 
  result = (unsigned short *)(unsigned short *) ((arg1)->neis);
  *(unsigned short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtPoly_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtPoly *arg1 = (dtPoly *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPoly **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtPoly_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtPoly *arg1 = (dtPoly *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPoly **)&jarg1; 
  result = (unsigned short) ((arg1)->flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtPoly_1vertCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dtPoly *arg1 = (dtPoly *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPoly **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->vertCount = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_laykun_Detour_DetourJNI_dtPoly_1vertCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dtPoly *arg1 = (dtPoly *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPoly **)&jarg1; 
  result = (unsigned char) ((arg1)->vertCount);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtPoly_1areaAndtype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dtPoly *arg1 = (dtPoly *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPoly **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->areaAndtype = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_laykun_Detour_DetourJNI_dtPoly_1areaAndtype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dtPoly *arg1 = (dtPoly *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPoly **)&jarg1; 
  result = (unsigned char) ((arg1)->areaAndtype);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtPoly_1setArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dtPoly *arg1 = (dtPoly *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPoly **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->setArea(arg2);
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtPoly_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dtPoly *arg1 = (dtPoly *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPoly **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT jshort JNICALL Java_com_laykun_Detour_DetourJNI_dtPoly_1getArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dtPoly *arg1 = (dtPoly *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPoly **)&jarg1; 
  result = (unsigned char)((dtPoly const *)arg1)->getArea();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_laykun_Detour_DetourJNI_dtPoly_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dtPoly *arg1 = (dtPoly *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPoly **)&jarg1; 
  result = (unsigned char)((dtPoly const *)arg1)->getType();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1dtPoly(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtPoly *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtPoly *)new dtPoly();
  *(dtPoly **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1dtPoly(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtPoly *arg1 = (dtPoly *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtPoly **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtPolyDetail_1vertBase_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtPolyDetail *arg1 = (dtPolyDetail *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPolyDetail **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->vertBase = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtPolyDetail_1vertBase_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtPolyDetail *arg1 = (dtPolyDetail *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPolyDetail **)&jarg1; 
  result = (unsigned int) ((arg1)->vertBase);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtPolyDetail_1triBase_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtPolyDetail *arg1 = (dtPolyDetail *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPolyDetail **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->triBase = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtPolyDetail_1triBase_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtPolyDetail *arg1 = (dtPolyDetail *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPolyDetail **)&jarg1; 
  result = (unsigned int) ((arg1)->triBase);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtPolyDetail_1vertCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dtPolyDetail *arg1 = (dtPolyDetail *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPolyDetail **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->vertCount = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_laykun_Detour_DetourJNI_dtPolyDetail_1vertCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dtPolyDetail *arg1 = (dtPolyDetail *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPolyDetail **)&jarg1; 
  result = (unsigned char) ((arg1)->vertCount);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtPolyDetail_1triCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dtPolyDetail *arg1 = (dtPolyDetail *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPolyDetail **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->triCount = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_laykun_Detour_DetourJNI_dtPolyDetail_1triCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dtPolyDetail *arg1 = (dtPolyDetail *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtPolyDetail **)&jarg1; 
  result = (unsigned char) ((arg1)->triCount);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1dtPolyDetail(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtPolyDetail *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtPolyDetail *)new dtPolyDetail();
  *(dtPolyDetail **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1dtPolyDetail(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtPolyDetail *arg1 = (dtPolyDetail *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtPolyDetail **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtLink_1ref_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtLink *arg1 = (dtLink *) 0 ;
  dtPolyRef arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtLink **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  if (arg1) (arg1)->ref = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtLink_1ref_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtLink *arg1 = (dtLink *) 0 ;
  dtPolyRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtLink **)&jarg1; 
  result = (dtPolyRef) ((arg1)->ref);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtLink_1next_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtLink *arg1 = (dtLink *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtLink **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtLink_1next_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtLink *arg1 = (dtLink *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtLink **)&jarg1; 
  result = (unsigned int) ((arg1)->next);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtLink_1edge_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dtLink *arg1 = (dtLink *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtLink **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->edge = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_laykun_Detour_DetourJNI_dtLink_1edge_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dtLink *arg1 = (dtLink *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtLink **)&jarg1; 
  result = (unsigned char) ((arg1)->edge);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtLink_1side_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dtLink *arg1 = (dtLink *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtLink **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->side = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_laykun_Detour_DetourJNI_dtLink_1side_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dtLink *arg1 = (dtLink *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtLink **)&jarg1; 
  result = (unsigned char) ((arg1)->side);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtLink_1bmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dtLink *arg1 = (dtLink *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtLink **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->bmin = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_laykun_Detour_DetourJNI_dtLink_1bmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dtLink *arg1 = (dtLink *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtLink **)&jarg1; 
  result = (unsigned char) ((arg1)->bmin);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtLink_1bmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dtLink *arg1 = (dtLink *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtLink **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->bmax = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_laykun_Detour_DetourJNI_dtLink_1bmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dtLink *arg1 = (dtLink *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtLink **)&jarg1; 
  result = (unsigned char) ((arg1)->bmax);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1dtLink(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtLink *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtLink *)new dtLink();
  *(dtLink **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1dtLink(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtLink *arg1 = (dtLink *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtLink **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtBVNode_1bmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtBVNode *arg1 = (dtBVNode *) 0 ;
  unsigned short *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtBVNode **)&jarg1; 
  arg2 = *(unsigned short **)&jarg2; 
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->bmin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtBVNode_1bmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtBVNode *arg1 = (dtBVNode *) 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtBVNode **)&jarg1; 
  result = (unsigned short *)(unsigned short *) ((arg1)->bmin);
  *(unsigned short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtBVNode_1bmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtBVNode *arg1 = (dtBVNode *) 0 ;
  unsigned short *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtBVNode **)&jarg1; 
  arg2 = *(unsigned short **)&jarg2; 
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->bmax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtBVNode_1bmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtBVNode *arg1 = (dtBVNode *) 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtBVNode **)&jarg1; 
  result = (unsigned short *)(unsigned short *) ((arg1)->bmax);
  *(unsigned short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtBVNode_1i_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtBVNode *arg1 = (dtBVNode *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtBVNode **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtBVNode_1i_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtBVNode *arg1 = (dtBVNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtBVNode **)&jarg1; 
  result = (int) ((arg1)->i);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1dtBVNode(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtBVNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtBVNode *)new dtBVNode();
  *(dtBVNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1dtBVNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtBVNode *arg1 = (dtBVNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtBVNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtOffMeshConnection_1pos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtOffMeshConnection *arg1 = (dtOffMeshConnection *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtOffMeshConnection **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->pos;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtOffMeshConnection_1pos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtOffMeshConnection *arg1 = (dtOffMeshConnection *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtOffMeshConnection **)&jarg1; 
  result = (float *)(float *) ((arg1)->pos);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtOffMeshConnection_1rad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dtOffMeshConnection *arg1 = (dtOffMeshConnection *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtOffMeshConnection **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rad = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_dtOffMeshConnection_1rad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dtOffMeshConnection *arg1 = (dtOffMeshConnection *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtOffMeshConnection **)&jarg1; 
  result = (float) ((arg1)->rad);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtOffMeshConnection_1poly_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtOffMeshConnection *arg1 = (dtOffMeshConnection *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtOffMeshConnection **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->poly = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtOffMeshConnection_1poly_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtOffMeshConnection *arg1 = (dtOffMeshConnection *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtOffMeshConnection **)&jarg1; 
  result = (unsigned short) ((arg1)->poly);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtOffMeshConnection_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dtOffMeshConnection *arg1 = (dtOffMeshConnection *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtOffMeshConnection **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_laykun_Detour_DetourJNI_dtOffMeshConnection_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dtOffMeshConnection *arg1 = (dtOffMeshConnection *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtOffMeshConnection **)&jarg1; 
  result = (unsigned char) ((arg1)->flags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtOffMeshConnection_1side_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dtOffMeshConnection *arg1 = (dtOffMeshConnection *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtOffMeshConnection **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->side = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_laykun_Detour_DetourJNI_dtOffMeshConnection_1side_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dtOffMeshConnection *arg1 = (dtOffMeshConnection *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtOffMeshConnection **)&jarg1; 
  result = (unsigned char) ((arg1)->side);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtOffMeshConnection_1userId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtOffMeshConnection *arg1 = (dtOffMeshConnection *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtOffMeshConnection **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->userId = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtOffMeshConnection_1userId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtOffMeshConnection *arg1 = (dtOffMeshConnection *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtOffMeshConnection **)&jarg1; 
  result = (unsigned int) ((arg1)->userId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1dtOffMeshConnection(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtOffMeshConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtOffMeshConnection *)new dtOffMeshConnection();
  *(dtOffMeshConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1dtOffMeshConnection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtOffMeshConnection *arg1 = (dtOffMeshConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtOffMeshConnection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1magic_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->magic = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1magic_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (int) ((arg1)->magic);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->version = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (int) ((arg1)->version);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (int) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (int) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1layer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->layer = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1layer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (int) ((arg1)->layer);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1userId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->userId = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1userId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (unsigned int) ((arg1)->userId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1polyCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->polyCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1polyCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (int) ((arg1)->polyCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1vertCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->vertCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1vertCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (int) ((arg1)->vertCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1maxLinkCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxLinkCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1maxLinkCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (int) ((arg1)->maxLinkCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1detailMeshCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->detailMeshCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1detailMeshCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (int) ((arg1)->detailMeshCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1detailVertCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->detailVertCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1detailVertCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (int) ((arg1)->detailVertCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1detailTriCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->detailTriCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1detailTriCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (int) ((arg1)->detailTriCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1bvNodeCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bvNodeCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1bvNodeCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (int) ((arg1)->bvNodeCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1offMeshConCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->offMeshConCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1offMeshConCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (int) ((arg1)->offMeshConCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1offMeshBase_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->offMeshBase = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1offMeshBase_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (int) ((arg1)->offMeshBase);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1walkableHeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->walkableHeight = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1walkableHeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (float) ((arg1)->walkableHeight);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1walkableRadius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->walkableRadius = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1walkableRadius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (float) ((arg1)->walkableRadius);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1walkableClimb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->walkableClimb = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1walkableClimb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (float) ((arg1)->walkableClimb);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1bmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->bmin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1bmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (float *)(float *) ((arg1)->bmin);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1bmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->bmax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1bmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (float *)(float *) ((arg1)->bmax);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1bvQuantFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->bvQuantFactor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshHeader_1bvQuantFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshHeader **)&jarg1; 
  result = (float) ((arg1)->bvQuantFactor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1dtMeshHeader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtMeshHeader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtMeshHeader *)new dtMeshHeader();
  *(dtMeshHeader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1dtMeshHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtMeshHeader *arg1 = (dtMeshHeader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtMeshHeader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1salt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->salt = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1salt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  result = (unsigned int) ((arg1)->salt);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1linksFreeList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->linksFreeList = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1linksFreeList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  result = (unsigned int) ((arg1)->linksFreeList);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1header_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  dtMeshHeader *arg2 = (dtMeshHeader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtMeshTile **)&jarg1; 
  arg2 = *(dtMeshHeader **)&jarg2; 
  if (arg1) (arg1)->header = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1header_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  dtMeshHeader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  result = (dtMeshHeader *) ((arg1)->header);
  *(dtMeshHeader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1polys_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  dtPoly *arg2 = (dtPoly *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtMeshTile **)&jarg1; 
  arg2 = *(dtPoly **)&jarg2; 
  if (arg1) (arg1)->polys = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1polys_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  dtPoly *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  result = (dtPoly *) ((arg1)->polys);
  *(dtPoly **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1verts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  float *arg2 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  if (arg1) (arg1)->verts = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1verts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  result = (float *) ((arg1)->verts);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1links_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  dtLink *arg2 = (dtLink *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtMeshTile **)&jarg1; 
  arg2 = *(dtLink **)&jarg2; 
  if (arg1) (arg1)->links = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1links_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  dtLink *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  result = (dtLink *) ((arg1)->links);
  *(dtLink **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1detailMeshes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  dtPolyDetail *arg2 = (dtPolyDetail *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtMeshTile **)&jarg1; 
  arg2 = *(dtPolyDetail **)&jarg2; 
  if (arg1) (arg1)->detailMeshes = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1detailMeshes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  dtPolyDetail *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  result = (dtPolyDetail *) ((arg1)->detailMeshes);
  *(dtPolyDetail **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1detailVerts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  float *arg2 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  if (arg1) (arg1)->detailVerts = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1detailVerts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  result = (float *) ((arg1)->detailVerts);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1detailTris_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  if (arg1) (arg1)->detailTris = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1detailTris_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  result = (unsigned char *) ((arg1)->detailTris);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1bvTree_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  dtBVNode *arg2 = (dtBVNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtMeshTile **)&jarg1; 
  arg2 = *(dtBVNode **)&jarg2; 
  if (arg1) (arg1)->bvTree = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1bvTree_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  dtBVNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  result = (dtBVNode *) ((arg1)->bvTree);
  *(dtBVNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1offMeshCons_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  dtOffMeshConnection *arg2 = (dtOffMeshConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtMeshTile **)&jarg1; 
  arg2 = *(dtOffMeshConnection **)&jarg2; 
  if (arg1) (arg1)->offMeshCons = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1offMeshCons_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  dtOffMeshConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  result = (dtOffMeshConnection *) ((arg1)->offMeshCons);
  *(dtOffMeshConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  result = (unsigned char *) ((arg1)->data);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1dataSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dataSize = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1dataSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  result = (int) ((arg1)->dataSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  result = (int) ((arg1)->flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1next_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  dtMeshTile *arg2 = (dtMeshTile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtMeshTile **)&jarg1; 
  arg2 = *(dtMeshTile **)&jarg2; 
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtMeshTile_1next_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  dtMeshTile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtMeshTile **)&jarg1; 
  result = (dtMeshTile *) ((arg1)->next);
  *(dtMeshTile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1dtMeshTile(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtMeshTile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtMeshTile *)new dtMeshTile();
  *(dtMeshTile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1dtMeshTile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtMeshTile *arg1 = (dtMeshTile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtMeshTile **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshParams_1orig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshParams *arg1 = (dtNavMeshParams *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshParams **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->orig;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshParams_1orig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshParams *arg1 = (dtNavMeshParams *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshParams **)&jarg1; 
  result = (float *)(float *) ((arg1)->orig);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshParams_1tileWidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dtNavMeshParams *arg1 = (dtNavMeshParams *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshParams **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->tileWidth = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshParams_1tileWidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dtNavMeshParams *arg1 = (dtNavMeshParams *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshParams **)&jarg1; 
  result = (float) ((arg1)->tileWidth);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshParams_1tileHeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dtNavMeshParams *arg1 = (dtNavMeshParams *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshParams **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->tileHeight = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshParams_1tileHeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dtNavMeshParams *arg1 = (dtNavMeshParams *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshParams **)&jarg1; 
  result = (float) ((arg1)->tileHeight);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshParams_1maxTiles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtNavMeshParams *arg1 = (dtNavMeshParams *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshParams **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxTiles = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshParams_1maxTiles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtNavMeshParams *arg1 = (dtNavMeshParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshParams **)&jarg1; 
  result = (int) ((arg1)->maxTiles);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshParams_1maxPolys_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtNavMeshParams *arg1 = (dtNavMeshParams *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshParams **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxPolys = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshParams_1maxPolys_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtNavMeshParams *arg1 = (dtNavMeshParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshParams **)&jarg1; 
  result = (int) ((arg1)->maxPolys);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1dtNavMeshParams(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtNavMeshParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtNavMeshParams *)new dtNavMeshParams();
  *(dtNavMeshParams **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1dtNavMeshParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtNavMeshParams *arg1 = (dtNavMeshParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtNavMeshParams **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1dtNavMesh(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtNavMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtNavMesh *)new dtNavMesh();
  *(dtNavMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1dtNavMesh(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtNavMesh **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1init_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtNavMeshParams *arg2 = (dtNavMeshParams *) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = *(dtNavMeshParams **)&jarg2; 
  result = (arg1)->init((dtNavMeshParams const *)arg2);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1init_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (arg1)->init(arg2,arg3,arg4);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1getParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtNavMeshParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  result = (dtNavMeshParams *)((dtNavMesh const *)arg1)->getParams();
  *(dtNavMeshParams **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1addTile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  dtTileRef arg5 ;
  dtTileRef *arg6 = (dtTileRef *) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (dtTileRef)jarg5; 
  arg6 = *(dtTileRef **)&jarg6; 
  result = (arg1)->addTile(arg2,arg3,arg4,arg5,arg6);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1removeTile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtTileRef arg2 ;
  unsigned char **arg3 = (unsigned char **) 0 ;
  int *arg4 = (int *) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (dtTileRef)jarg2; 
  arg3 = *(unsigned char ***)&jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (arg1)->removeTile(arg2,arg3,arg4);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1calcTileLoc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  float *arg2 = (float *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  ((dtNavMesh const *)arg1)->calcTileLoc((float const *)arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1getTileAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  dtMeshTile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (dtMeshTile *)((dtNavMesh const *)arg1)->getTileAt(arg2,arg3,arg4);
  *(dtMeshTile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1getTilesAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jint jarg5) {
  jint jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  int arg2 ;
  int arg3 ;
  dtMeshTile **arg4 = (dtMeshTile **) 0 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(dtMeshTile ***)&jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((dtNavMesh const *)arg1)->getTilesAt(arg2,arg3,(dtMeshTile const **)arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1getTileRefAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  dtTileRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (dtTileRef)((dtNavMesh const *)arg1)->getTileRefAt(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1getTileRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtMeshTile *arg2 = (dtMeshTile *) 0 ;
  dtTileRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = *(dtMeshTile **)&jarg2; 
  result = (dtTileRef)((dtNavMesh const *)arg1)->getTileRef((dtMeshTile const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1getTileByRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtTileRef arg2 ;
  dtMeshTile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (dtTileRef)jarg2; 
  result = (dtMeshTile *)((dtNavMesh const *)arg1)->getTileByRef(arg2);
  *(dtMeshTile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1getMaxTiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  result = (int)((dtNavMesh const *)arg1)->getMaxTiles();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1getTile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  int arg2 ;
  dtMeshTile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (dtMeshTile *)((dtNavMesh const *)arg1)->getTile(arg2);
  *(dtMeshTile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1getTileAndPolyByRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtPolyRef arg2 ;
  dtMeshTile **arg3 = (dtMeshTile **) 0 ;
  dtPoly **arg4 = (dtPoly **) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(dtMeshTile ***)&jarg3; 
  arg4 = *(dtPoly ***)&jarg4; 
  result = ((dtNavMesh const *)arg1)->getTileAndPolyByRef(arg2,(dtMeshTile const **)arg3,(dtPoly const **)arg4);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1getTileAndPolyByRefUnsafe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtPolyRef arg2 ;
  dtMeshTile **arg3 = (dtMeshTile **) 0 ;
  dtPoly **arg4 = (dtPoly **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(dtMeshTile ***)&jarg3; 
  arg4 = *(dtPoly ***)&jarg4; 
  ((dtNavMesh const *)arg1)->getTileAndPolyByRefUnsafe(arg2,(dtMeshTile const **)arg3,(dtPoly const **)arg4);
}


SWIGEXPORT jboolean JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1isValidPolyRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtPolyRef arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  result = (bool)((dtNavMesh const *)arg1)->isValidPolyRef(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1getPolyRefBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtMeshTile *arg2 = (dtMeshTile *) 0 ;
  dtPolyRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = *(dtMeshTile **)&jarg2; 
  result = (dtPolyRef)((dtNavMesh const *)arg1)->getPolyRefBase((dtMeshTile const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1getOffMeshConnectionPolyEndPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtPolyRef arg2 ;
  dtPolyRef arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = (dtPolyRef)jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(float **)&jarg5; 
  result = ((dtNavMesh const *)arg1)->getOffMeshConnectionPolyEndPoints(arg2,arg3,arg4,arg5);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1getOffMeshConnectionByRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtPolyRef arg2 ;
  dtOffMeshConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  result = (dtOffMeshConnection *)((dtNavMesh const *)arg1)->getOffMeshConnectionByRef(arg2);
  *(dtOffMeshConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1setPolyFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtPolyRef arg2 ;
  unsigned short arg3 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = (unsigned short)jarg3; 
  result = (arg1)->setPolyFlags(arg2,arg3);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1getPolyFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtPolyRef arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(unsigned short **)&jarg3; 
  result = ((dtNavMesh const *)arg1)->getPolyFlags(arg2,arg3);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1setPolyArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtPolyRef arg2 ;
  unsigned char arg3 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (arg1)->setPolyArea(arg2,arg3);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1getPolyArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtPolyRef arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(unsigned char **)&jarg3; 
  result = ((dtNavMesh const *)arg1)->getPolyArea(arg2,arg3);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1getTileStateSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtMeshTile *arg2 = (dtMeshTile *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = *(dtMeshTile **)&jarg2; 
  result = (int)((dtNavMesh const *)arg1)->getTileStateSize((dtMeshTile const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1storeTileState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtMeshTile *arg2 = (dtMeshTile *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = *(dtMeshTile **)&jarg2; 
  arg3 = *(unsigned char **)&jarg3; 
  arg4 = (int)jarg4; 
  result = ((dtNavMesh const *)arg1)->storeTileState((dtMeshTile const *)arg2,arg3,arg4);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1restoreTileState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtMeshTile *arg2 = (dtMeshTile *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = *(dtMeshTile **)&jarg2; 
  arg3 = *(unsigned char **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (arg1)->restoreTileState(arg2,(unsigned char const *)arg3,arg4);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1encodePolyId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  dtPolyRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (dtPolyRef)((dtNavMesh const *)arg1)->encodePolyId(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1decodePolyId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtPolyRef arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(unsigned int **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return ;
  } 
  arg4 = *(unsigned int **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return ;
  } 
  arg5 = *(unsigned int **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return ;
  } 
  ((dtNavMesh const *)arg1)->decodePolyId(arg2,*arg3,*arg4,*arg5);
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1decodePolyIdSalt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtPolyRef arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  result = (unsigned int)((dtNavMesh const *)arg1)->decodePolyIdSalt(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1decodePolyIdTile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtPolyRef arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  result = (unsigned int)((dtNavMesh const *)arg1)->decodePolyIdTile(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMesh_1decodePolyIdPoly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  dtPolyRef arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  result = (unsigned int)((dtNavMesh const *)arg1)->decodePolyIdPoly(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtAllocNavMesh(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtNavMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtNavMesh *)dtAllocNavMesh();
  *(dtNavMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtFreeNavMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMesh **)&jarg1; 
  dtFreeNavMesh(arg1);
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1verts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = *(unsigned short **)&jarg2; 
  if (arg1) (arg1)->verts = (unsigned short const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1verts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (unsigned short *) ((arg1)->verts);
  *(unsigned short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1vertCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->vertCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1vertCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (int) ((arg1)->vertCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1polys_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = *(unsigned short **)&jarg2; 
  if (arg1) (arg1)->polys = (unsigned short const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1polys_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (unsigned short *) ((arg1)->polys);
  *(unsigned short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1polyFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = *(unsigned short **)&jarg2; 
  if (arg1) (arg1)->polyFlags = (unsigned short const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1polyFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (unsigned short *) ((arg1)->polyFlags);
  *(unsigned short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1polyAreas_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  if (arg1) (arg1)->polyAreas = (unsigned char const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1polyAreas_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (unsigned char *) ((arg1)->polyAreas);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1polyCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->polyCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1polyCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (int) ((arg1)->polyCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1nvp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nvp = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1nvp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (int) ((arg1)->nvp);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1detailMeshes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  if (arg1) (arg1)->detailMeshes = (unsigned int const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1detailMeshes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (unsigned int *) ((arg1)->detailMeshes);
  *(unsigned int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1detailVerts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float *arg2 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  if (arg1) (arg1)->detailVerts = (float const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1detailVerts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (float *) ((arg1)->detailVerts);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1detailVertsCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->detailVertsCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1detailVertsCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (int) ((arg1)->detailVertsCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1detailTris_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  if (arg1) (arg1)->detailTris = (unsigned char const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1detailTris_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (unsigned char *) ((arg1)->detailTris);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1detailTriCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->detailTriCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1detailTriCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (int) ((arg1)->detailTriCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1offMeshConVerts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float *arg2 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  if (arg1) (arg1)->offMeshConVerts = (float const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1offMeshConVerts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (float *) ((arg1)->offMeshConVerts);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1offMeshConRad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float *arg2 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  if (arg1) (arg1)->offMeshConRad = (float const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1offMeshConRad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (float *) ((arg1)->offMeshConRad);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1offMeshConFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = *(unsigned short **)&jarg2; 
  if (arg1) (arg1)->offMeshConFlags = (unsigned short const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1offMeshConFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (unsigned short *) ((arg1)->offMeshConFlags);
  *(unsigned short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1offMeshConAreas_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  if (arg1) (arg1)->offMeshConAreas = (unsigned char const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1offMeshConAreas_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (unsigned char *) ((arg1)->offMeshConAreas);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1offMeshConDir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  if (arg1) (arg1)->offMeshConDir = (unsigned char const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1offMeshConDir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (unsigned char *) ((arg1)->offMeshConDir);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1offMeshConUserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  if (arg1) (arg1)->offMeshConUserID = (unsigned int const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1offMeshConUserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (unsigned int *) ((arg1)->offMeshConUserID);
  *(unsigned int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1offMeshConCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->offMeshConCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1offMeshConCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (int) ((arg1)->offMeshConCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1userId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->userId = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1userId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (unsigned int) ((arg1)->userId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1tileX_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tileX = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1tileX_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (int) ((arg1)->tileX);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1tileY_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tileY = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1tileY_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (int) ((arg1)->tileY);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1tileLayer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tileLayer = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1tileLayer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (int) ((arg1)->tileLayer);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1bmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->bmin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1bmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (float *)(float *) ((arg1)->bmin);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1bmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->bmax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1bmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (float *)(float *) ((arg1)->bmax);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1walkableHeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->walkableHeight = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1walkableHeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (float) ((arg1)->walkableHeight);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1walkableRadius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->walkableRadius = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1walkableRadius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (float) ((arg1)->walkableRadius);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1walkableClimb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->walkableClimb = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1walkableClimb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (float) ((arg1)->walkableClimb);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1cs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->cs = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1cs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (float) ((arg1)->cs);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1ch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ch = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1ch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (float) ((arg1)->ch);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1buildBvTree_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->buildBvTree = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshCreateParams_1buildBvTree_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  result = (bool) ((arg1)->buildBvTree);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1dtNavMeshCreateParams(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtNavMeshCreateParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtNavMeshCreateParams *)new dtNavMeshCreateParams();
  *(dtNavMeshCreateParams **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1dtNavMeshCreateParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_laykun_Detour_DetourJNI_dtCreateNavMeshData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  dtNavMeshCreateParams *arg1 = (dtNavMeshCreateParams *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshCreateParams **)&jarg1; 
  arg2 = *(unsigned char ***)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (bool)dtCreateNavMeshData(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshHeaderSwapEndian(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)dtNavMeshHeaderSwapEndian(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshDataSwapEndian(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)dtNavMeshDataSwapEndian(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1dtQueryFilter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtQueryFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtQueryFilter *)new dtQueryFilter();
  *(dtQueryFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_laykun_Detour_DetourJNI_dtQueryFilter_1passFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  dtQueryFilter *arg1 = (dtQueryFilter *) 0 ;
  dtPolyRef arg2 ;
  dtMeshTile *arg3 = (dtMeshTile *) 0 ;
  dtPoly *arg4 = (dtPoly *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(dtQueryFilter **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(dtMeshTile **)&jarg3; 
  arg4 = *(dtPoly **)&jarg4; 
  result = (bool)((dtQueryFilter const *)arg1)->passFilter(arg2,(dtMeshTile const *)arg3,(dtPoly const *)arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_dtQueryFilter_1getCost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jlong jarg11, jobject jarg11_, jlong jarg12, jobject jarg12_) {
  jfloat jresult = 0 ;
  dtQueryFilter *arg1 = (dtQueryFilter *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  dtPolyRef arg4 ;
  dtMeshTile *arg5 = (dtMeshTile *) 0 ;
  dtPoly *arg6 = (dtPoly *) 0 ;
  dtPolyRef arg7 ;
  dtMeshTile *arg8 = (dtMeshTile *) 0 ;
  dtPoly *arg9 = (dtPoly *) 0 ;
  dtPolyRef arg10 ;
  dtMeshTile *arg11 = (dtMeshTile *) 0 ;
  dtPoly *arg12 = (dtPoly *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg11_;
  (void)jarg12_;
  arg1 = *(dtQueryFilter **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = (dtPolyRef)jarg4; 
  arg5 = *(dtMeshTile **)&jarg5; 
  arg6 = *(dtPoly **)&jarg6; 
  arg7 = (dtPolyRef)jarg7; 
  arg8 = *(dtMeshTile **)&jarg8; 
  arg9 = *(dtPoly **)&jarg9; 
  arg10 = (dtPolyRef)jarg10; 
  arg11 = *(dtMeshTile **)&jarg11; 
  arg12 = *(dtPoly **)&jarg12; 
  result = (float)((dtQueryFilter const *)arg1)->getCost((float const *)arg2,(float const *)arg3,arg4,(dtMeshTile const *)arg5,(dtPoly const *)arg6,arg7,(dtMeshTile const *)arg8,(dtPoly const *)arg9,arg10,(dtMeshTile const *)arg11,(dtPoly const *)arg12);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_dtQueryFilter_1getAreaCost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  dtQueryFilter *arg1 = (dtQueryFilter *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtQueryFilter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)((dtQueryFilter const *)arg1)->getAreaCost(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtQueryFilter_1setAreaCost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  dtQueryFilter *arg1 = (dtQueryFilter *) 0 ;
  int arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtQueryFilter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setAreaCost(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtQueryFilter_1getIncludeFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtQueryFilter *arg1 = (dtQueryFilter *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtQueryFilter **)&jarg1; 
  result = (unsigned short)((dtQueryFilter const *)arg1)->getIncludeFlags();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtQueryFilter_1setIncludeFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtQueryFilter *arg1 = (dtQueryFilter *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtQueryFilter **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  (arg1)->setIncludeFlags(arg2);
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtQueryFilter_1getExcludeFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtQueryFilter *arg1 = (dtQueryFilter *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtQueryFilter **)&jarg1; 
  result = (unsigned short)((dtQueryFilter const *)arg1)->getExcludeFlags();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtQueryFilter_1setExcludeFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtQueryFilter *arg1 = (dtQueryFilter *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtQueryFilter **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  (arg1)->setExcludeFlags(arg2);
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1dtQueryFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtQueryFilter *arg1 = (dtQueryFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtQueryFilter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtRaycastHit_1t_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dtRaycastHit *arg1 = (dtRaycastHit *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtRaycastHit **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->t = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_dtRaycastHit_1t_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dtRaycastHit *arg1 = (dtRaycastHit *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtRaycastHit **)&jarg1; 
  result = (float) ((arg1)->t);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtRaycastHit_1hitNormal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtRaycastHit *arg1 = (dtRaycastHit *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtRaycastHit **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->hitNormal;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtRaycastHit_1hitNormal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtRaycastHit *arg1 = (dtRaycastHit *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtRaycastHit **)&jarg1; 
  result = (float *)(float *) ((arg1)->hitNormal);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtRaycastHit_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtRaycastHit *arg1 = (dtRaycastHit *) 0 ;
  dtPolyRef *arg2 = (dtPolyRef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtRaycastHit **)&jarg1; 
  arg2 = *(dtPolyRef **)&jarg2; 
  if (arg1) (arg1)->path = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtRaycastHit_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtRaycastHit *arg1 = (dtRaycastHit *) 0 ;
  dtPolyRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtRaycastHit **)&jarg1; 
  result = (dtPolyRef *) ((arg1)->path);
  *(dtPolyRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtRaycastHit_1pathCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtRaycastHit *arg1 = (dtRaycastHit *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtRaycastHit **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pathCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtRaycastHit_1pathCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtRaycastHit *arg1 = (dtRaycastHit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtRaycastHit **)&jarg1; 
  result = (int) ((arg1)->pathCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtRaycastHit_1maxPath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtRaycastHit *arg1 = (dtRaycastHit *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtRaycastHit **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxPath = arg2;
}


SWIGEXPORT jint JNICALL Java_com_laykun_Detour_DetourJNI_dtRaycastHit_1maxPath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtRaycastHit *arg1 = (dtRaycastHit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtRaycastHit **)&jarg1; 
  result = (int) ((arg1)->maxPath);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtRaycastHit_1pathCost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  dtRaycastHit *arg1 = (dtRaycastHit *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtRaycastHit **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->pathCost = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_laykun_Detour_DetourJNI_dtRaycastHit_1pathCost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  dtRaycastHit *arg1 = (dtRaycastHit *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtRaycastHit **)&jarg1; 
  result = (float) ((arg1)->pathCost);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1dtRaycastHit(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtRaycastHit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtRaycastHit *)new dtRaycastHit();
  *(dtRaycastHit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1dtRaycastHit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtRaycastHit *arg1 = (dtRaycastHit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtRaycastHit **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_new_1dtNavMeshQuery(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtNavMeshQuery *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtNavMeshQuery *)new dtNavMeshQuery();
  *(dtNavMeshQuery **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_delete_1dtNavMeshQuery(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtNavMesh *arg2 = (dtNavMesh *) 0 ;
  int arg3 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = *(dtNavMesh **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->init((dtNavMesh const *)arg2,arg3);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1findPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jlong jarg8, jint jarg9) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  dtPolyRef arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  dtQueryFilter *arg6 = (dtQueryFilter *) 0 ;
  dtPolyRef *arg7 = (dtPolyRef *) 0 ;
  int *arg8 = (int *) 0 ;
  int arg9 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = (dtPolyRef)jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(float **)&jarg5; 
  arg6 = *(dtQueryFilter **)&jarg6; 
  arg7 = *(dtPolyRef **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  arg9 = (int)jarg9; 
  result = ((dtNavMeshQuery const *)arg1)->findPath(arg2,arg3,(float const *)arg4,(float const *)arg5,(dtQueryFilter const *)arg6,arg7,arg8,arg9);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1findStraightPath_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jlong jarg9, jint jarg10, jint jarg11) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  dtPolyRef *arg4 = (dtPolyRef *) 0 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  unsigned char *arg7 = (unsigned char *) 0 ;
  dtPolyRef *arg8 = (dtPolyRef *) 0 ;
  int *arg9 = (int *) 0 ;
  int arg10 ;
  int arg11 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(dtPolyRef **)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(float **)&jarg6; 
  arg7 = *(unsigned char **)&jarg7; 
  arg8 = *(dtPolyRef **)&jarg8; 
  arg9 = *(int **)&jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (int)jarg11; 
  result = ((dtNavMeshQuery const *)arg1)->findStraightPath((float const *)arg2,(float const *)arg3,(dtPolyRef const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1findStraightPath_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jlong jarg9, jint jarg10) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  dtPolyRef *arg4 = (dtPolyRef *) 0 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  unsigned char *arg7 = (unsigned char *) 0 ;
  dtPolyRef *arg8 = (dtPolyRef *) 0 ;
  int *arg9 = (int *) 0 ;
  int arg10 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(dtPolyRef **)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(float **)&jarg6; 
  arg7 = *(unsigned char **)&jarg7; 
  arg8 = *(dtPolyRef **)&jarg8; 
  arg9 = *(int **)&jarg9; 
  arg10 = (int)jarg10; 
  result = ((dtNavMeshQuery const *)arg1)->findStraightPath((float const *)arg2,(float const *)arg3,(dtPolyRef const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1initSlicedFindPath_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  dtPolyRef arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  dtQueryFilter *arg6 = (dtQueryFilter *) 0 ;
  unsigned int arg7 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = (dtPolyRef)jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(float **)&jarg5; 
  arg6 = *(dtQueryFilter **)&jarg6; 
  arg7 = (unsigned int)jarg7; 
  result = (arg1)->initSlicedFindPath(arg2,arg3,(float const *)arg4,(float const *)arg5,(dtQueryFilter const *)arg6,arg7);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1initSlicedFindPath_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  dtPolyRef arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  dtQueryFilter *arg6 = (dtQueryFilter *) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = (dtPolyRef)jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(float **)&jarg5; 
  arg6 = *(dtQueryFilter **)&jarg6; 
  result = (arg1)->initSlicedFindPath(arg2,arg3,(float const *)arg4,(float const *)arg5,(dtQueryFilter const *)arg6);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1updateSlicedFindPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (arg1)->updateSlicedFindPath(arg2,arg3);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1finalizeSlicedFindPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef *arg2 = (dtPolyRef *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = *(dtPolyRef **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (arg1)->finalizeSlicedFindPath(arg2,arg3,arg4);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1finalizeSlicedFindPathPartial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4, jlong jarg5, jint jarg6) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef *arg2 = (dtPolyRef *) 0 ;
  int arg3 ;
  dtPolyRef *arg4 = (dtPolyRef *) 0 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = *(dtPolyRef **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(dtPolyRef **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  arg6 = (int)jarg6; 
  result = (arg1)->finalizeSlicedFindPathPartial((dtPolyRef const *)arg2,arg3,arg4,arg5,arg6);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1findPolysAroundCircle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8, jlong jarg9, jint jarg10) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  dtQueryFilter *arg5 = (dtQueryFilter *) 0 ;
  dtPolyRef *arg6 = (dtPolyRef *) 0 ;
  dtPolyRef *arg7 = (dtPolyRef *) 0 ;
  float *arg8 = (float *) 0 ;
  int *arg9 = (int *) 0 ;
  int arg10 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = (float)jarg4; 
  arg5 = *(dtQueryFilter **)&jarg5; 
  arg6 = *(dtPolyRef **)&jarg6; 
  arg7 = *(dtPolyRef **)&jarg7; 
  arg8 = *(float **)&jarg8; 
  arg9 = *(int **)&jarg9; 
  arg10 = (int)jarg10; 
  result = ((dtNavMeshQuery const *)arg1)->findPolysAroundCircle(arg2,(float const *)arg3,arg4,(dtQueryFilter const *)arg5,arg6,arg7,arg8,arg9,arg10);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1findPolysAroundShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8, jlong jarg9, jint jarg10) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  dtQueryFilter *arg5 = (dtQueryFilter *) 0 ;
  dtPolyRef *arg6 = (dtPolyRef *) 0 ;
  dtPolyRef *arg7 = (dtPolyRef *) 0 ;
  float *arg8 = (float *) 0 ;
  int *arg9 = (int *) 0 ;
  int arg10 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(dtQueryFilter **)&jarg5; 
  arg6 = *(dtPolyRef **)&jarg6; 
  arg7 = *(dtPolyRef **)&jarg7; 
  arg8 = *(float **)&jarg8; 
  arg9 = *(int **)&jarg9; 
  arg10 = (int)jarg10; 
  result = ((dtNavMeshQuery const *)arg1)->findPolysAroundShape(arg2,(float const *)arg3,arg4,(dtQueryFilter const *)arg5,arg6,arg7,arg8,arg9,arg10);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1findNearestPoly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  dtQueryFilter *arg4 = (dtQueryFilter *) 0 ;
  dtPolyRef *arg5 = (dtPolyRef *) 0 ;
  float *arg6 = (float *) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(dtQueryFilter **)&jarg4; 
  arg5 = *(dtPolyRef **)&jarg5; 
  arg6 = *(float **)&jarg6; 
  result = ((dtNavMeshQuery const *)arg1)->findNearestPoly((float const *)arg2,(float const *)arg3,(dtQueryFilter const *)arg4,arg5,arg6);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1queryPolygons(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jint jarg7) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  dtQueryFilter *arg4 = (dtQueryFilter *) 0 ;
  dtPolyRef *arg5 = (dtPolyRef *) 0 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(dtQueryFilter **)&jarg4; 
  arg5 = *(dtPolyRef **)&jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = (int)jarg7; 
  result = ((dtNavMeshQuery const *)arg1)->queryPolygons((float const *)arg2,(float const *)arg3,(dtQueryFilter const *)arg4,arg5,arg6,arg7);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1findLocalNeighbourhood(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8, jint jarg9) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  dtQueryFilter *arg5 = (dtQueryFilter *) 0 ;
  dtPolyRef *arg6 = (dtPolyRef *) 0 ;
  dtPolyRef *arg7 = (dtPolyRef *) 0 ;
  int *arg8 = (int *) 0 ;
  int arg9 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = (float)jarg4; 
  arg5 = *(dtQueryFilter **)&jarg5; 
  arg6 = *(dtPolyRef **)&jarg6; 
  arg7 = *(dtPolyRef **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  arg9 = (int)jarg9; 
  result = ((dtNavMeshQuery const *)arg1)->findLocalNeighbourhood(arg2,(float const *)arg3,arg4,(dtQueryFilter const *)arg5,arg6,arg7,arg8,arg9);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1moveAlongSurface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8, jint jarg9) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  dtQueryFilter *arg5 = (dtQueryFilter *) 0 ;
  float *arg6 = (float *) 0 ;
  dtPolyRef *arg7 = (dtPolyRef *) 0 ;
  int *arg8 = (int *) 0 ;
  int arg9 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(dtQueryFilter **)&jarg5; 
  arg6 = *(float **)&jarg6; 
  arg7 = *(dtPolyRef **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  arg9 = (int)jarg9; 
  result = ((dtNavMeshQuery const *)arg1)->moveAlongSurface(arg2,(float const *)arg3,(float const *)arg4,(dtQueryFilter const *)arg5,arg6,arg7,arg8,arg9);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1raycast_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8, jlong jarg9, jint jarg10) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  dtQueryFilter *arg5 = (dtQueryFilter *) 0 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  dtPolyRef *arg8 = (dtPolyRef *) 0 ;
  int *arg9 = (int *) 0 ;
  int arg10 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(dtQueryFilter **)&jarg5; 
  arg6 = *(float **)&jarg6; 
  arg7 = *(float **)&jarg7; 
  arg8 = *(dtPolyRef **)&jarg8; 
  arg9 = *(int **)&jarg9; 
  arg10 = (int)jarg10; 
  result = ((dtNavMeshQuery const *)arg1)->raycast(arg2,(float const *)arg3,(float const *)arg4,(dtQueryFilter const *)arg5,arg6,arg7,arg8,arg9,arg10);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1raycast_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jobject jarg7_, jlong jarg8) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  dtQueryFilter *arg5 = (dtQueryFilter *) 0 ;
  unsigned int arg6 ;
  dtRaycastHit *arg7 = (dtRaycastHit *) 0 ;
  dtPolyRef arg8 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg7_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(dtQueryFilter **)&jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = *(dtRaycastHit **)&jarg7; 
  arg8 = (dtPolyRef)jarg8; 
  result = ((dtNavMeshQuery const *)arg1)->raycast(arg2,(float const *)arg3,(float const *)arg4,(dtQueryFilter const *)arg5,arg6,arg7,arg8);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1raycast_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  dtQueryFilter *arg5 = (dtQueryFilter *) 0 ;
  unsigned int arg6 ;
  dtRaycastHit *arg7 = (dtRaycastHit *) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg7_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(dtQueryFilter **)&jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = *(dtRaycastHit **)&jarg7; 
  result = ((dtNavMeshQuery const *)arg1)->raycast(arg2,(float const *)arg3,(float const *)arg4,(dtQueryFilter const *)arg5,arg6,arg7);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1findDistanceToWall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  dtQueryFilter *arg5 = (dtQueryFilter *) 0 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  float *arg8 = (float *) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = (float)jarg4; 
  arg5 = *(dtQueryFilter **)&jarg5; 
  arg6 = *(float **)&jarg6; 
  arg7 = *(float **)&jarg7; 
  arg8 = *(float **)&jarg8; 
  result = ((dtNavMeshQuery const *)arg1)->findDistanceToWall(arg2,(float const *)arg3,arg4,(dtQueryFilter const *)arg5,arg6,arg7,arg8);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1getPolyWallSegments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jint jarg7) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  dtQueryFilter *arg3 = (dtQueryFilter *) 0 ;
  float *arg4 = (float *) 0 ;
  dtPolyRef *arg5 = (dtPolyRef *) 0 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(dtQueryFilter **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(dtPolyRef **)&jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = (int)jarg7; 
  result = ((dtNavMeshQuery const *)arg1)->getPolyWallSegments(arg2,(dtQueryFilter const *)arg3,arg4,arg5,arg6,arg7);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1findRandomPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtQueryFilter *arg2 = (dtQueryFilter *) 0 ;
  float (*arg3)() = (float (*)()) 0 ;
  dtPolyRef *arg4 = (dtPolyRef *) 0 ;
  float *arg5 = (float *) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = *(dtQueryFilter **)&jarg2; 
  arg3 = *(float (**)())&jarg3; 
  arg4 = *(dtPolyRef **)&jarg4; 
  arg5 = *(float **)&jarg5; 
  result = ((dtNavMeshQuery const *)arg1)->findRandomPoint((dtQueryFilter const *)arg2,arg3,arg4,arg5);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1findRandomPointAroundCircle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  dtQueryFilter *arg5 = (dtQueryFilter *) 0 ;
  float (*arg6)() = (float (*)()) 0 ;
  dtPolyRef *arg7 = (dtPolyRef *) 0 ;
  float *arg8 = (float *) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = (float)jarg4; 
  arg5 = *(dtQueryFilter **)&jarg5; 
  arg6 = *(float (**)())&jarg6; 
  arg7 = *(dtPolyRef **)&jarg7; 
  arg8 = *(float **)&jarg8; 
  result = ((dtNavMeshQuery const *)arg1)->findRandomPointAroundCircle(arg2,(float const *)arg3,arg4,(dtQueryFilter const *)arg5,arg6,arg7,arg8);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1closestPointOnPoly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  bool *arg5 = (bool *) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(bool **)&jarg5; 
  result = ((dtNavMeshQuery const *)arg1)->closestPointOnPoly(arg2,(float const *)arg3,arg4,arg5);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1closestPointOnPolyBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = ((dtNavMeshQuery const *)arg1)->closestPointOnPolyBoundary(arg2,(float const *)arg3,arg4);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1getPolyHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  dtStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = ((dtNavMeshQuery const *)arg1)->getPolyHeight(arg2,(float const *)arg3,arg4);
  *(dtStatus **)&jresult = new dtStatus((const dtStatus &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1isValidPolyRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  dtQueryFilter *arg3 = (dtQueryFilter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  arg3 = *(dtQueryFilter **)&jarg3; 
  result = (bool)((dtNavMeshQuery const *)arg1)->isValidPolyRef(arg2,(dtQueryFilter const *)arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1isInClosedList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtPolyRef arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  arg2 = (dtPolyRef)jarg2; 
  result = (bool)((dtNavMeshQuery const *)arg1)->isInClosedList(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1getNodePool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtNodePool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  result = (dtNodePool *)((dtNavMeshQuery const *)arg1)->getNodePool();
  *(dtNodePool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtNavMeshQuery_1getAttachedNavMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  dtNavMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  result = (dtNavMesh *)((dtNavMeshQuery const *)arg1)->getAttachedNavMesh();
  *(dtNavMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_laykun_Detour_DetourJNI_dtAllocNavMeshQuery(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtNavMeshQuery *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtNavMeshQuery *)dtAllocNavMeshQuery();
  *(dtNavMeshQuery **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_laykun_Detour_DetourJNI_dtFreeNavMeshQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  dtNavMeshQuery *arg1 = (dtNavMeshQuery *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtNavMeshQuery **)&jarg1; 
  dtFreeNavMeshQuery(arg1);
}


#ifdef __cplusplus
}
#endif

